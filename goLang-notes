calculator:
----------
package main

import (
	"fmt"
)
func calculator(arg1,arg2 int, operator string) (result int){
	switch(operator){
	case "add": result=arg1+arg2
	case "sub": result=arg1-arg2
	case "mul": result=arg1*arg2
	case "div": result=arg1/arg2
	}
	return
}

func main() {
	a := 1
	b := 2
	fmt.Println(calculator(a,b,"add"))
}
===============================================================================

Array
------
package main

import (
	"fmt"
)

func main() {
	var n [10]int
	for i := 0; i < 10; i++ {
       	 n[i] = i
  	}
	n[4]=100
	fmt.Println("printing array")
	printArray(n)
		
	//convert complete array into slice	
	var slice = n[:]
	fmt.Println("printing complete slice")	
	printSlice(slice)
		
	//convert array into slice	
	var sli = n[:len(n)-1]
	fmt.Println("printing modified slice")
	printSlice(sli)
	
}
func printArray(arr [10]int){
   fmt.Printf("len=%d cap=%d Array=%v\n",len(arr),cap(arr),arr)
}

func printSlice(sli []int){
   fmt.Printf("len=%d cap=%d slice=%v\n",len(sli),cap(sli),sli)
}
===============================================================================
Strings and Characters
----------------------
package main

import (
	"fmt"
	"strings"
)

func main() {
	var str string = "hello "	
	
	//print string
	fmt.Printf("print string : %s",str)
	
	//Access string character by character
	var i int
	for i=0;i<len(str);i++ {
		fmt.Printf("%c",str[i])
	}
	
	fmt.Printf("\n Third character of string str is %c",str[2])
		
	//concatenate two strings 
	var str2 string = "Moto"
	var str3 string
	str3 = str+str2	
	fmt.Printf("\n concatenate two strings : %s",str3)
	
	
	//combine characters to form string
	var str4 string = "chair table"
	var str5 string
    for i := 0; i < len(str4); i++ {
        str5= str5+string(str4[i])
    }	
	fmt.Printf("\n combine characters to form string : %s",str5)
	
	//Replace existing character with new character in a given string	
	var str6 string = "follow hello "
	str6 = strings.Replace(str6,"l","L",-1)
	fmt.Printf("\n Inserted characters in string : %s",str6)	
}
==================================================================================
Structure
---------
	type employee struct {
		id int
		name string
		desgn string
	}	
	  var emp employee	
	  emp = employee {1,"abc","SSE"}	
	  fmt.Println("struct values",emp)
	  fmt.Println("struct values - name",emp.name)
	  fmt.Println("struct values - designation",emp.desgn)

==================================================================================
Interfaces : example-1
----------------------
Go programming provides another data type called interfaces which represents a set of method signatures.
The struct data type implements these interfaces to have method definitions for the method signature of the interfaces.

package main

import "fmt"

func main() {

	rect := Rectangle{10, 2}
	fmt.Println(executeArea(rect))
}

type Shape interface {
	area() int
}
func executeArea(shape Shape) int {
	return shape.area()
}

type Rectangle struct {
	length, breadth int
}

func (rect Rectangle) area() (result int) {
	result = (rect.length) * (rect.breadth)
	return
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Interfaces : example-2
----------------------
package main

import (
	"fmt"
	"math"
)

/* define an interface */
type Shape interface {
	area() float64
}
/* define a method for shape */
func getArea(shape Shape) float64 {
	return shape.area()
}

/* define a circle */
type Circle struct {
	x, y, radius float64
}
/* define a method for circle (implementation of Shape.area())*/
func (circle Circle) area() float64 {
	return math.Pi * circle.radius * circle.radius
}

/* define a Rectangle */
type Rectangle struct {
	width, height float64
}
/* define a method for rectangle (implementation of Shape.area())*/
func (rect Rectangle) area() float64 {
	return rect.width * rect.height
}
func main() {
	circle := Circle{x: 0, y: 0, radius: 5}
	rectangle := Rectangle{width: 10, height: 5}

	fmt.Printf("Circle area: %f\n", getArea(circle))
	fmt.Printf("Rectangle area: %f\n", getArea(rectangle))
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Interfaces : example-3
----------------------
package main

import "fmt"

func main() {

	rect := Rectangle{10, 2}
	fmt.Println("area of rectangle : ", executeArea(rect))

	cir := Circle{3}
	fmt.Println("area of circle : ", executeArea(cir))
}

type Shape interface {
	area() float64
}

func executeArea(shape Shape) float64 {
	return shape.area()
}

type Rectangle struct {
	length, breadth float64
}

func (rect Rectangle) area() (result float64) {
	result = (rect.length) * (rect.breadth)
	return
}

type Circle struct {
	radius float64
}

func (cir Circle) area() float64 {
	return (cir.radius * cir.radius * (3.14))
}

===================================================================================================================================
Map
----
var variableName map[key_data_type]value_data_type = make(map[key_data_type]value_data_type)

package main

import (
	"fmt"
)

func main() {
	var m map[string]string = make(map[string]string)
	m["up"] = "lko"
	m["mp"] = "bhopal"
	m["ap"] = "hyd"
	for state := range m {
		fmt.Printf("\ncapital of %s is %s ", state, m[state])
	}	
	city, isPresent := m["up"]  // this is boolean notation of GOlang, if the value is true then assigned to given variable(here, city) otherwise given variable(here, city) value is empty; also other variable(here, isPresent) holds true/false boolean vale
	if(isPresent){
		fmt.Printf("\ncity is there - %t and name is %s ", isPresent,city )
	}else{
		fmt.Printf("\ncity is there - %t and name is %s ", isPresent,city )
	}
}
===============================================================================================================================